<!doctype html>
<html lang="vi">
<head>
  <meta charset="utf-8" />
  <title>SDVT HACK ACCESS v2.0</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    :root {
      --bg: #000;
      --text: #0f0;
      --accent: #0f0;
      --error: #f00;
      --success: #0f0;
      --gray: #0a0a0a;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      background: var(--bg);
      color: var(--text);
      font-family: 'Courier New', monospace;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      overflow-x: hidden;
      position: relative;
    }

    /* Matrix rain effect */
    #matrix-bg {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      pointer-events: none;
    }

    .terminal {
      width: 100%;
      max-width: 600px;
      background: rgba(0, 0, 0, 0.85);
      border: 1px solid #0f0;
      box-shadow: 0 0 20px rgba(0, 255, 0, 0.3), inset 0 0 10px rgba(0, 255, 0, 0.1);
      padding: 20px;
      border-radius: 0;
      position: relative;
      overflow: hidden;
    }

    .terminal::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: linear-gradient(90deg, transparent, #0f0, transparent);
      animation: scan 2s linear infinite;
    }

    @keyframes scan {
      0% { top: 0; }
      100% { top: 100%; }
    }

    .terminal-header {
      padding: 8px 0;
      border-bottom: 1px solid rgba(0, 255, 0, 0.3);
      margin-bottom: 20px;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 2px;
      text-shadow: 0 0 5px #0f0;
    }

    .prompt {
      color: #0f0;
      margin: 10px 0;
      line-height: 1.6;
      font-size: 15px;
      white-space: pre-wrap;
    }

    input {
      width: 100%;
      background: var(--bg);
      color: var(--text);
      border: 1px solid #0f0;
      padding: 10px;
      margin: 10px 0;
      font-family: 'Courier New', monospace;
      font-size: 15px;
      caret-color: #0f0;
      outline: none;
      box-shadow: 0 0 5px rgba(0, 255, 0, 0.3);
    }

    input::placeholder {
      color: #0a0;
    }

    button {
      background: transparent;
      color: var(--text);
      border: 1px solid var(--accent);
      padding: 8px 16px;
      margin: 5px;
      cursor: pointer;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      letter-spacing: 1px;
      text-transform: uppercase;
      transition: all 0.2s;
    }

    button:hover {
      background: rgba(0, 255, 0, 0.1);
      box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
    }

    .hidden {
      display: none !important;
    }

    .error {
      color: var(--error);
      margin: 10px 0;
      padding: 8px;
      border-left: 3px solid var(--error);
      background: rgba(255, 0, 0, 0.1);
    }

    .success {
      color: var(--success);
      margin: 10px 0;
      padding: 8px;
      border-left: 3px solid var(--success);
      background: rgba(0, 255, 0, 0.05);
    }

    /* Popup - Hacker modal */
    .popup {
      position: fixed;
      inset: 0;
      background: rgba(0,0,0,0.9);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 999;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s;
    }

    .popup.active {
      opacity: 1;
      pointer-events: all;
    }

    .popup-content {
      background: #000;
      border: 2px solid #0f0;
      padding: 20px;
      width: 90%;
      max-width: 400px;
      position: relative;
      box-shadow: 0 0 20px #0f0;
    }

    .popup-content h3 {
      text-align: center;
      margin-bottom: 20px;
      text-shadow: 0 0 5px #0f0;
    }

    .popup-content code {
      display: block;
      background: #000;
      color: #0f0;
      padding: 15px;
      margin: 15px 0;
      font-size: 20px;
      letter-spacing: 3px;
      text-align: center;
      border: 1px dashed #0f0;
      font-weight: bold;
      text-shadow: 0 0 5px #0f0;
    }

    .close-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: #f00;
      color: #fff;
      border: none;
      width: 25px;
      height: 25px;
      cursor: pointer;
      font-weight: bold;
    }

    /* Loading dots */
    .loading:after {
      content: '.';
      animation: dots 1.5s steps(5, end) infinite;
    }

    @keyframes dots {
      0%, 20% { content: '.'; }
      40% { content: '..'; }
      60%, 100% { content: '...'; }
    }

    /* CRT effect */
    body::after {
      content: "";
      position: fixed;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      background: linear-gradient(rgba(18, 16, 16, 0) 50%, rgba(0, 0, 0, 0.2) 50%);
      background-size: 100% 4px;
      z-index: 9999;
      pointer-events: none;
      opacity: 0.1;
    }

    /* Scan lines */
    .scanline {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(to bottom, transparent 50%, rgba(0,0,0,0.1) 50%);
      background-size: 100% 2px;
      pointer-events: none;
      z-index: 1;
      opacity: 0.3;
    }
  </style>
</head>
<body>
  <div class="scanline"></div>
  <canvas id="matrix-bg"></canvas>

  <div class="terminal" id="terminal">
    <div class="terminal-header">> SDVT SECURITY BYPASS v2.0</div>

    <div id="loginSection">
      <div class="prompt">> INITIATING LOGIN SEQUENCE...</div>
      <div class="prompt">> ENTER CREDENTIALS:</div>
      <label>USERNAME:</label>
      <input id="user" type="text" placeholder="root@sdvt.local" autocomplete="off">
      <label>PASSWORD:</label>
      <input id="pass" type="password" placeholder="••••••••••••" autocomplete="off">
      <div>
        <button id="btnLogin">EXECUTE</button>
        <button id="btnClear">CLEAR</button>
      </div>
      <div id="errLogin" class="error hidden"></div>
    </div>

    <div id="step2" class="hidden">
      <div class="prompt">> AUTHENTICATION PASSED</div>
      <div class="prompt">> ENTER ACCESS CODE TO UNLOCK PAYLOAD:</div>
      <label>ACCESS CODE:</label>
      <input id="accessCode" type="text" placeholder="ENTER 12-DIGIT KEY" autocomplete="off">
      <div>
        <button id="btnCheck">DECRYPT</button>
        <button id="btnBack"><< BACK</button>
      </div>
      <div id="errCode" class="error hidden"></div>
    </div>
  </div>

  <!-- Popup -->
  <div class="popup" id="popup">
    <div class="popup-content">
      <button class="close-btn" id="btnClose">X</button>
      <h3>> PAYLOAD UNLOCKED</h3>
      <code id="secretCode">ACCESS GRANTED</code>
      <div style="text-align:center; margin-top:20px">
        <button id="btnCopy">COPY KEY</button>
        <button id="btnHide" style="margin-left:10px">CLOSE</button>
      </div>
    </div>
  </div>

  <script>
    // Matrix Rain Effect
    const canvas = document.getElementById('matrix-bg');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$+-*/=%\"'#&_(),.;:?!\\|{}<>[]^~";
    const fontSize = 14;
    const columns = canvas.width / fontSize;
    const drops = [];

    for (let i = 0; i < columns; i++) {
      drops[i] = 1;
    }

    function draw() {
      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = '#0f0';
      ctx.font = fontSize + 'px monospace';

      for (let i = 0; i < drops.length; i++) {
        const text = chars.charAt(Math.floor(Math.random() * chars.length));
        ctx.fillText(text, i * fontSize, drops[i] * fontSize);
        if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
          drops[i] = 0;
        }
        drops[i]++;
      }
    }

    setInterval(draw, 50);

    // Resize canvas on window resize
    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });

    // Main logic
    (function(){
      const USER = 'SDVT', PASS = 'SDVT';
      const ACCESS_CODES = {
        'h1h404robloxx': 'evombwxq2',
        'SDVT': 'dhdytkkl6'
      };

      const elements = {
        loginSection: document.getElementById('loginSection'),
        step2: document.getElementById('step2'),
        user: document.getElementById('user'),
        pass: document.getElementById('pass'),
        accessCode: document.getElementById('accessCode'),
        errLogin: document.getElementById('errLogin'),
        errCode: document.getElementById('errCode'),
        popup: document.getElementById('popup'),
        secretCode: document.getElementById('secretCode')
      };

      // Type writer effect for hacker feel
      function typeWriter(text, element, delay = 50) {
        return new Promise(resolve => {
          let i = 0;
          const timer = setInterval(() => {
            if (i < text.length) {
              element.innerHTML += text.charAt(i);
              i++;
            } else {
              clearInterval(timer);
              resolve();
            }
          }, delay);
        });
      }

      // Login
      document.getElementById('btnLogin').addEventListener('click', async () => {
        const u = elements.user.value.trim();
        const p = elements.pass.value.trim();

        elements.errLogin.classList.add('hidden');

        if (!u || !p) {
          elements.errLogin.textContent = "> ERROR: EMPTY CREDENTIALS";
          elements.errLogin.classList.remove('hidden');
          return;
        }

        // Simulate hacking process
        const promptDiv = document.createElement('div');
        promptDiv.className = 'prompt';
        elements.loginSection.appendChild(promptDiv);
        await typeWriter("> ATTEMPTING BRUTE FORCE...", promptDiv);

        setTimeout(async () => {
          if (u === USER && p === PASS) {
            await typeWriter("\n> ACCESS GRANTED ✓", promptDiv);
            setTimeout(() => {
              elements.loginSection.classList.add('hidden');
              elements.step2.classList.remove('hidden');
              elements.accessCode.focus();
            }, 800);
          } else {
            await typeWriter("\n> ACCESS DENIED ✗", promptDiv);
            elements.errLogin.textContent = "> ALERT: INVALID CREDENTIALS - SYSTEM LOCKOUT IN 30s";
            elements.errLogin.classList.remove('hidden');
          }
        }, 1500);
      });

      // Clear
      document.getElementById('btnClear').addEventListener('click', () => {
        elements.user.value = '';
        elements.pass.value = '';
        elements.errLogin.classList.add('hidden');
        elements.user.focus();
      });

      // Check access code
      document.getElementById('btnCheck').addEventListener('click', async () => {
        const code = elements.accessCode.value.trim();
        elements.errCode.classList.add('hidden');

        if (!code) {
          elements.errCode.textContent = "> ERROR: NO ACCESS CODE PROVIDED";
          elements.errCode.classList.remove('hidden');
          return;
        }

        const promptDiv = document.createElement('div');
        promptDiv.className = 'prompt';
        elements.step2.appendChild(promptDiv);
        await typeWriter("> DECRYPTING PAYLOAD" + " ".repeat(30), promptDiv);

        let dots = 0;
        const dotInterval = setInterval(() => {
          promptDiv.textContent = "> DECRYPTING PAYLOAD" + ".".repeat(dots % 4);
          dots++;
        }, 300);

        setTimeout(() => {
          clearInterval(dotInterval);
          if (ACCESS_CODES[code]) {
            promptDiv.textContent = "> PAYLOAD DECRYPTED ✓";
            elements.secretCode.textContent = ACCESS_CODES[code];
            elements.popup.classList.add('active');
            // Auto close after 10s
            setTimeout(() => {
              elements.popup.classList.remove('active');
            }, 10000);
          } else {
            promptDiv.textContent = "> DECRYPTION FAILED ✗";
            elements.errCode.textContent = "> ERROR: INVALID ACCESS CODE - TRY AGAIN";
            elements.errCode.classList.remove('hidden');
          }
        }, 2500);
      });

      // Back
      document.getElementById('btnBack').addEventListener('click', () => {
        elements.step2.classList.add('hidden');
        elements.loginSection.classList.remove('hidden');
        elements.pass.value = '';
        elements.errCode.classList.add('hidden');
        elements.user.focus();
      });

      // Popup
      function hidePopup() {
        elements.popup.classList.remove('active');
      }

      document.getElementById('btnClose').addEventListener('click', hidePopup);
      document.getElementById('btnHide').addEventListener('click', hidePopup);

      // Copy
      document.getElementById('btnCopy').addEventListener('click', () => {
        const text = elements.secretCode.textContent;
        navigator.clipboard?.writeText(text).then(() => {
          const success = document.createElement('div');
          success.className = 'success';
          success.textContent = "> KEY COPIED TO CLIPBOARD ✓";
          document.querySelector('.popup-content').appendChild(success);
          setTimeout(() => success.remove(), 2000);
        });
      });

      // Focus first input
      elements.user.focus();

      // Allow Enter key
      elements.user.addEventListener('keydown', e => { if(e.key === 'Enter') elements.pass.focus(); });
      elements.pass.addEventListener('keydown', e => { if(e.key === 'Enter') document.getElementById('btnLogin').click(); });
      elements.accessCode.addEventListener('keydown', e => { if(e.key === 'Enter') document.getElementById('btnCheck').click(); });
    })();
  </script>
</body>
</html>
